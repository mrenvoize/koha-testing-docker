#!/bin/bash

# ktd - koha-testing-docker management script
#
#              Copyright 2022 Theke Solutions
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

usage() {
    local scriptname=$0

    cat <<EOF

This script lets you manage your KTD environment.

Usage:

    $scriptname [--es6|--es7|--es8|--os1|--os2|--plugins|--selenium|--sso|--localrun] up -d
    $scriptname [--es6|--es7|--es8|--os1|--os2|--plugins|--selenium|--sso|--localrun] down
    $scriptname [--es6|--es7|--es8|--os1|--os2|--plugins|--selenium|--sso|--localrun] pull
    $scriptname [--root] --shell
    $scriptname --dbshell
    $scriptname --logs
    $scriptname -h|--help

Options:

    --es6                 Use an Elasticsearch 6.x container
    --es7                 Use an Elasticsearch 7.x container
    --es8                 Use an Elasticsearch 8.x container
    --os1                 Use an OpenSearch 1.x container
    --os2                 Use an OpenSearch 2.x container
    --plugins             Enable plugin development environment
    --selenium            Use a Selenium container
    --sso                 Use a Keycloak container
    --shell               Get into the Koha container
    --dbshell             Get into the database
    --run 'command'       Execute a command inside the shell (requires --shell)
    --wait-ready N        Wait N secs until KTD is up and running
    --persistent-db       Make this instance's DB persistent
    --proxy               Use the proxied version of the compose file
    --name                Sets the project name
    --localrun            Start the container with local run.sh file
    --logs                Follow the koha container logs
    --help|-h             Display this help message

Environment variables:

    KTD_HOME              Mandatory. Needs to point to a clone of koha-testing-docker
    KTD_PROJECT           Optional. For using with the compose -p option (default: 'koha')

Note: --es6, --es7, --es8, --os1 and --os2 are mutually exclussive.

EOF
}

set_docker() {
    if [ -z "$DOCKER_BINARY" ]; then

        export DOCKER_BINARY="$(which docker)"

    fi
}

set_searchengine() {
    if [ "$ENABLED_SEARCHENGINE" == "" ]; then

        ENABLED_SEARCHENGINE=$1

        if [ "$ENABLED_SEARCHENGINE" = "os1" ]; then
            ES_IMAGE="koha/elasticsearch-icu:opensearch-1.x"
            ES_IMAGE_TYPE="opensearch"
        elif [ "$ENABLED_SEARCHENGINE" = "os2" ]; then
            ES_IMAGE="koha/elasticsearch-icu:opensearch-2.x"
            ES_IMAGE_TYPE="opensearch"
        elif [ "$ENABLED_SEARCHENGINE" = "es6" ]; then
            ES_IMAGE="koha/elasticsearch-icu:6.x"
            ES_IMAGE_TYPE="elastic"
        elif [ "$ENABLED_SEARCHENGINE" = "es7" ]; then
            ES_IMAGE="koha/elasticsearch-icu:7.x"
            ES_IMAGE_TYPE="elastic"
        elif [ "$ENABLED_SEARCHENGINE" = "es8" ]; then
            ES_IMAGE="koha/elasticsearch-icu:8.x"
            ES_IMAGE_TYPE="elastic"
        fi

        if [ "$ARCH" = "arm64v8" ]; then
            export ES_IMAGE="${ES_IMAGE}-arm64"
        else
            export ES_IMAGE="${ES_IMAGE}"
        fi

        export ES_IMAGE_TYPE=$ES_IMAGE_TYPE
    else
        printf "\nError: only one search engine option is allowed (you passed $ENABLED_SEARCHENGINE and $1)\n\n"
        usage
        exit 1
    fi
}

set_arch() {
    UNAME=$(uname -m)
    ARCH=""
    if [ "$UNAME" == "arm64" ] || [ "$UNAME" == "aarch64" ]; then
        ARCH="arm64v8"
    fi

    export ARCH=$ARCH
}

set_image() {
    if [ "$ARCH" = "arm64v8" ]; then

        # if main, then explicitly set to main-bookworm
        if [ "$KOHA_IMAGE" == "main" ] || [ -z "${KOHA_IMAGE}" ]; then
            export KOHA_IMAGE="main-bookworm-arm64v8"
        fi

        # tweak used memcached image
        export MEMCACHED_IMAGE="arm64v8/memcached"

        if [ "$DB_IMAGE" != "" ]; then # leave alone if empty
            if echo $DB_IMAGE | grep -v -q 'arm64v8'; then
                export DB_IMAGE="arm64v8/${DB_IMAGE}"
            fi
        fi
    fi
}

ENV_DB_IMAGE=$DB_IMAGE
ENV_ES_IMAGE=$ES_IMAGE
ENV_KOHA_IMAGE=$KOHA_IMAGE

source $KTD_HOME/.env

# ENV overrides sourced config, only if not empty
[ "$ENV_DB_IMAGE" != "" ] && DB_IMAGE=$ENV_DB_IMAGE
[ "$ENV_ES_IMAGE" != "" ] && ES_IMAGE=$ENV_ES_IMAGE
[ "$ENV_KOHA_IMAGE" != "" ] && KOHA_IMAGE=$ENV_KOHA_IMAGE

set_docker
set_arch

WAIT_READY="no"

ENABLED_SEARCHENGINE=""

ENABLE_PLUGINS="no"
ENABLE_SELENIUM="no"
ENABLE_SSO="no"
ENABLE_LOCAL_RUN_SCRIPT="no"
PERSISTENT_DB="no"

KOHA_ELASTICSEARCH="no"

PROJECT_NAME="kohadev"

ROOT_ACCESS="no"
RUN=""
SHELL_ACCESS="no"
DBSHELL_ACCESS="no"

FOLLOW_LOGS="no"

USE_PROXY="no"

# Read command line parameters
while [ $# -gt 0 ]; do

    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    -v | --verbose)
        verbose="yes"
        shift
        ;;
    --logs)
        FOLLOW_LOGS="yes"
        break
        ;;
    --es6)
        set_searchengine "es6"
        shift
        ;;
    --es7)
        set_searchengine "es7"
        shift
        ;;
    --es8)
        set_searchengine "es8"
        shift
        ;;
    --os1)
        set_searchengine "os1"
        shift
        ;;
    --os2)
        set_searchengine "os2"
        shift
        ;;
    --persistent-db)
        PERSISTENT_DB="yes"
        shift
        ;;
    --plugins)
        ENABLE_PLUGINS="yes"
        shift
        ;;
    --proxy)
        USE_PROXY="yes"
        shift
        ;;
    --name)
        PROJECT_NAME=$2
        shift 2
        ;;
    --selenium)
        ENABLE_SELENIUM="yes"
        shift
        ;;
    --sso)
        ENABLE_SSO="yes"
        shift
        ;;
    --root)
        ROOT_ACCESS="yes"
        shift
        ;;
    --run)
        RUN=$2
        shift 2
        ;;
    --shell)
        SHELL_ACCESS="yes"
        shift
        ;;
    --dbshell)
        SHELL_ACCESS="yes"
        DBSHELL_ACCESS="yes"
        shift
        ;;
    --wait-ready)
        WAIT_READY="yes"
        WAIT_TIMEOUT=$2
        break
        ;;
    --localrun)
        ENABLE_LOCAL_RUN_SCRIPT="yes"
        shift
        ;;
    -*)
        printf "\nError: expected a docker compose action and got '$1' instead\n\n"
        usage
        exit 1
        ;;
    *)
        # We expect the remaining stuff are the instance names
        break
        ;;
    esac

done

if [ "${KOHA_INSTANCE}" = "" ]; then
    KOHA_INSTANCE=kohadev
fi

if [ "$WAIT_READY" != "no" ]; then
    if [ -x ${WAIT_TIMEOUT} ]; then
        WAIT_TIMEOUT=100
    fi

    regex='^[0-9]+$'
    if ! [[ $WAIT_TIMEOUT =~ $regex ]]; then
        printf "ERROR: timeout must be a number (got $WAIT_TIMEOUT)\n"
        exit 1
    fi

    for i in $(seq 1 $WAIT_TIMEOUT); do
        if docker exec ${PROJECT_NAME}-koha-1 bash -c '[ -e /ktd_ready ]'; then
            printf "\n"
            exit 0
        else
            printf "\rAttempt $i of $WAIT_TIMEOUT"
            sleep 1
        fi
    done

    printf "\nERROR: no more attempts\n"
    exit 1
fi

if [ "$SHELL_ACCESS" != "no" ]; then

    if [ "$ROOT_ACCESS" != "no" ]; then
        "$DOCKER_BINARY" exec -it ${PROJECT_NAME}-koha-1 bash
    elif [ "$DBSHELL_ACCESS" != "no" ]; then
        "$DOCKER_BINARY" exec -it ${PROJECT_NAME}-db-1 mysql -u koha_kohadev -ppassword koha_kohadev
    elif [ "$RUN" != "" ]; then
        "$DOCKER_BINARY" exec -it ${PROJECT_NAME}-koha-1 bash -c "${RUN}"
    else
        "$DOCKER_BINARY" exec --user ${KOHA_INSTANCE}-koha --workdir /kohadevbox/koha -ti ${PROJECT_NAME}-koha-1 bash
    fi
elif [ "$FOLLOW_LOGS" != "no" ]; then

    "$DOCKER_BINARY" logs -f ${PROJECT_NAME}-koha-1
else
    # run the KTD command
    if [ -n "$KTD_HOME" ]; then

        if [ -d "$KTD_HOME" ]; then
            # All good :-D

            if [ ! -d "${SYNC_REPO}" ]; then
                printf "\nThe mandatory \$SYNC_REPO variable points to an invalid directory.\nIt needs to point to a Koha clone directory.\n\n"
                usage
                exit 1
            fi

            # tweak used images
            set_image

            # save current working directory
            current_dir=$(pwd)
            cd "${KTD_HOME}"

            if [ "${USE_PROXY}" != "yes" ]; then
                COMPOSE_OPTIONS='-f docker-compose-light.yml'
            else
                COMPOSE_OPTIONS='-f docker-compose-proxy.yml'
            fi

            if [ "$ENABLED_SEARCHENGINE" != "" ]; then
                COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -f compose/${ES_IMAGE_TYPE}.yml"
                KOHA_ELASTICSEARCH="yes"
            fi

            if [ "$ENABLE_PLUGINS" != "no" ]; then
                COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -f compose/plugins.yml"
            fi

            if [ "$ENABLE_SELENIUM" != "no" ]; then
                COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -f compose/selenium.yml"
            fi

            if [ "$ENABLE_SSO" != "no" ]; then
                COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -f compose/sso.yml"
            fi

            if [ "$PERSISTENT_DB" != "no" ]; then
                COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -f compose/persistent_db.yml"
            fi

            # worktree? need to jump to the koha clone
            cd ${SYNC_REPO}
            if [ "$(git rev-parse --git-dir)" != ".git" ]; then
                GIT_WORKTREE_SOURCE=$(git rev-parse --git-common-dir)
                export GIT_WORKTREE_SOURCE="${GIT_WORKTREE_SOURCE%%/.git*}"
                printf "\nDetected Git worktree. Mounting ${GIT_WORKTREE_SOURCE}\n\n"
                COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -f compose/worktree.yml"
            fi
            # back to KTD clone
            cd ${KTD_HOME}

            if [ "$ENABLE_LOCAL_RUN_SCRIPT" != "no" ]; then
                COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -f compose/localrun.yml"
            fi

            export KOHA_ELASTICSEARCH="${KOHA_ELASTICSEARCH}"

            COMPOSE_OPTIONS="${COMPOSE_OPTIONS} -p ${PROJECT_NAME}"

            export KOHA_INSTANCE=${PROJECT_NAME}

            if [ "$1" = "down" ]; then
                "$DOCKER_BINARY" compose -p ${PROJECT_NAME} down
            else
                "$DOCKER_BINARY" compose ${COMPOSE_OPTIONS} $@
            fi

            # back to the original working directory
            cd "${current_dir}"
        else
            printf "\nThe mandatory \$KTD_HOME variable points to an invalid directory.\nIt needs to point to a KTD clone directory.\n\n"
            usage
            exit 1
        fi
    else
        printf "\nThe mandatory \$KTD_HOME variable is not defined. It needs to point to a KTD clone directory.\n\n"
        usage
        exit 1
    fi
fi

exit 0
